#!/usr/bin/env node

/**
 * Script to update Bitcoin and MSTR MNAV data and generate data.js
 * Run: npm run update-data
 */

const fs = require('fs');
const path = require('path');
const { parse } = require('csv-parse/sync');
const https = require('https');
const http = require('http');

// Configuration
const BTC_CSV_PATH = 'btc_historical_prices.csv';
const MNAV_CSV_PATH = 'btc_mnav_merged.csv';
const OUTPUT_JS_PATH = 'data.js';

// Optional: URLs to download CSV files from
// const BTC_CSV_URL = 'https://example.com/btc_historical_prices.csv';
// const MNAV_CSV_URL = 'https://example.com/btc_mnav_merged.csv';

/**
 * Download file from URL
 */
function downloadFile(url, filepath) {
    return new Promise((resolve, reject) => {
        const protocol = url.startsWith('https') ? https : http;
        const file = fs.createWriteStream(filepath);

        console.log(`Downloading ${url} to ${filepath}...`);

        protocol.get(url, (response) => {
            response.pipe(file);

            file.on('finish', () => {
                file.close();
                console.log(`✅ Downloaded ${filepath}`);
                resolve(true);
            });
        }).on('error', (err) => {
            fs.unlink(filepath, () => {}); // Delete the file on error
            console.log(`❌ Error downloading ${filepath}: ${err.message}`);
            reject(err);
        });
    });
}

/**
 * Read BTC historical data from CSV
 */
function readBtcData(filepath) {
    try {
        if (!fs.existsSync(filepath)) {
            console.log(`❌ File not found: ${filepath}`);
            return [];
        }

        const fileContent = fs.readFileSync(filepath, 'utf-8');
        const records = parse(fileContent, {
            columns: true,
            skip_empty_lines: true
        });

        const btcData = [];
        for (const row of records) {
            // Handle potential # prefix in column names
            const date = (row['# date'] || row['date'] || '').replace('# ', '');
            const price = parseFloat(row['btc_price_usd'] || row['price'] || 0);

            if (date && price > 0) {
                btcData.push({
                    date: date,
                    price: price
                });
            }
        }

        console.log(`✅ Read ${btcData.length} BTC price records`);
        return btcData;
    } catch (error) {
        console.log(`❌ Error reading BTC data: ${error.message}`);
        return [];
    }
}

/**
 * Read MNAV data from CSV
 */
function readMnavData(filepath) {
    try {
        if (!fs.existsSync(filepath)) {
            console.log(`❌ File not found: ${filepath}`);
            return [];
        }

        const fileContent = fs.readFileSync(filepath, 'utf-8');
        const records = parse(fileContent, {
            columns: true,
            skip_empty_lines: true
        });

        const mnavData = [];
        for (const row of records) {
            // Handle potential # prefix in column names
            const date = (row['# date'] || row['date'] || '').replace('# ', '');

            if (date) {
                mnavData.push({
                    date: date,
                    spotPrice: parseFloat(row['spot btc_price_usd'] || row['spotPrice'] || 0),
                    mnav: parseFloat(row['MNAV'] || row['mnav'] || 0),
                    mnavAdjustedPrice: parseFloat(row['MNAV_x_BTC_Price'] || row['mnavAdjustedPrice'] || 0),
                    btcHoldings: parseFloat(row['MSTR_BTC_Holdings'] || row['btcHoldings'] || 0),
                    marketCap: parseFloat(row['MSTR_Market_Cap_USD'] || row['marketCap'] || 0)
                });
            }
        }

        console.log(`✅ Read ${mnavData.length} MNAV records`);
        return mnavData;
    } catch (error) {
        console.log(`❌ Error reading MNAV data: ${error.message}`);
        return [];
    }
}

/**
 * Write data to data.js file
 */
function writeDataJs(btcData, mnavData, filepath) {
    try {
        const timestamp = new Date().toISOString();
        const jsContent = `// Bitcoin Rainbow Chart Data
// Last updated: ${timestamp}
// Generated by update-data.js

const btcHistoricalData = ${JSON.stringify(btcData, null, 2)};

const mnavHistoricalData = ${JSON.stringify(mnavData, null, 2)};
`;

        fs.writeFileSync(filepath, jsContent);

        console.log(`✅ Written data.js with ${btcData.length} BTC records and ${mnavData.length} MNAV records`);
        if (btcData.length > 0) {
            console.log(`📊 BTC data range: ${btcData[0].date} to ${btcData[btcData.length - 1].date}`);
        }
        if (mnavData.length > 0) {
            console.log(`📊 MNAV data range: ${mnavData[0].date} to ${mnavData[mnavData.length - 1].date}`);
        }
        return true;
    } catch (error) {
        console.log(`❌ Error writing data.js: ${error.message}`);
        return false;
    }
}

/**
 * Main function
 */
async function main() {
    console.log('🚀 Starting data update...');
    console.log('-'.repeat(50));

    // Check if CSV files exist
    if (!fs.existsSync(BTC_CSV_PATH)) {
        console.log(`⚠️  ${BTC_CSV_PATH} not found`);
        console.log('Please ensure the CSV file exists or configure download URLs');

        // Uncomment to download from URL
        // if (typeof BTC_CSV_URL !== 'undefined') {
        //     await downloadFile(BTC_CSV_URL, BTC_CSV_PATH);
        // } else {
        //     process.exit(1);
        // }
    }

    if (!fs.existsSync(MNAV_CSV_PATH)) {
        console.log(`⚠️  ${MNAV_CSV_PATH} not found`);
        console.log('Please ensure the CSV file exists or configure download URLs');

        // Uncomment to download from URL
        // if (typeof MNAV_CSV_URL !== 'undefined') {
        //     await downloadFile(MNAV_CSV_URL, MNAV_CSV_PATH);
        // } else {
        //     process.exit(1);
        // }
    }

    // Read data from CSV files
    const btcData = readBtcData(BTC_CSV_PATH);
    const mnavData = readMnavData(MNAV_CSV_PATH);

    if (btcData.length === 0 && mnavData.length === 0) {
        console.log('❌ No data found to write');
        process.exit(1);
    }

    // Write to data.js
    if (writeDataJs(btcData, mnavData, OUTPUT_JS_PATH)) {
        console.log('-'.repeat(50));
        console.log('✨ Data update complete!');
        console.log(`📁 Output file: ${OUTPUT_JS_PATH}`);
    } else {
        console.log('❌ Failed to update data.js');
        process.exit(1);
    }
}

// Run the main function
main().catch(error => {
    console.error('❌ Unexpected error:', error);
    process.exit(1);
});