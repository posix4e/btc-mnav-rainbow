const fs = require('fs');
const https = require('https');

function fetchDailySatPrice() {
    return new Promise((resolve, reject) => {
        const url = 'https://dailysatprice.com/data/latest.csv';

        https.get(url, (response) => {
            let data = '';

            response.on('data', (chunk) => {
                data += chunk;
            });

            response.on('end', () => {
                resolve(data);
            });

        }).on('error', (err) => {
            reject(err);
        });
    });
}

async function updateBtcData() {
    try {
        console.log('Fetching BTC price data from dailysatprice.com...');
        const csvData = await fetchDailySatPrice();

        // Parse CSV
        const lines = csvData.trim().split('\n');
        const btcData = [];

        // Skip header and process each line
        for (let i = 1; i < lines.length; i++) {
            const [date, price] = lines[i].split(',');
            if (date && price) {
                btcData.push({
                    date: date.trim(),
                    price: parseFloat(price.trim())
                });
            }
        }

        console.log(`Fetched ${btcData.length} BTC price records`);
        console.log(`Date range: ${btcData[0].date} to ${btcData[btcData.length - 1].date}`);

        // Read existing data.js to preserve other data
        const dataJsContent = fs.readFileSync('data.js', 'utf8');

        // Find the mnavHistoricalData section
        const mnavMatch = dataJsContent.match(/const mnavHistoricalData = (\[[\s\S]*?\]);/);
        const strMatch = dataJsContent.match(/const strHistoricalData = (\{[\s\S]*?\});/);
        const modelMatch = dataJsContent.match(/(\/\/ Rainbow model[\s\S]*?const presetConfigs[\s\S]*?\};)/);

        // Build new data.js content
        let newContent = '// Generated by fetch-dailysatprice.js\n\n';
        newContent += `const btcHistoricalData = ${JSON.stringify(btcData, null, 2)};\n\n`;

        if (mnavMatch) {
            newContent += `const mnavHistoricalData = ${mnavMatch[1]};\n\n`;
        }

        if (strMatch) {
            newContent += `const strHistoricalData = ${strMatch[1]};\n\n`;
        }

        if (modelMatch) {
            newContent += modelMatch[1] + '\n';
        }

        // Write updated data
        fs.writeFileSync('data.js', newContent);
        console.log('Successfully updated data.js with new BTC price data');

    } catch (error) {
        console.error('Error updating BTC data:', error);
        process.exit(1);
    }
}

updateBtcData();